import React, { useRef } from "react";
import { useDispatch, useSelector } from "react-redux";
import { useNavigate } from "react-router-dom";
import { createPortal } from "react-dom";
import { googleSigninActions } from "../../store/reducer/googleSignin-slice";

import "./UserProfileModal.css"; // 모달 창 스타일링을 위한 CSS
import {
  profileModalActions,
  updateProfileInfoToServer,
} from "../../store/reducer/profileModal-slice";

const UserProfileModal = () => {
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const imgFileInputRef = useRef(null);
  const backgroundImgFileInputRef = useRef(null);

  //모달 상태
  const isProfileModalOpen = useSelector(
    (state) => state.profileModal.isProfileModalOpen
  );

  //-------------------<<<<<<<<<이전 값 가져오기:구글슬라이스에서>>>>>>>--------------------------
  //이름
  const profileFullName = useSelector(
    (state) => state.profileModal.profileFullName
  );

  //소개
  const profileIntroduce = useSelector(
    (state) => state.profileModal.profileIntroduce
  );

  //교육
  const profileEducation = useSelector(
    (state) => state.profileModal.profileEducation
  );

  //지역
  const profileLocation = useSelector(
    (state) => state.profileModal.profileLocation
  );

  //현재 프로필 사진
  const profileImg = useSelector((state) => state.profileModal.profileImg);

  //-------------------<<<<<<<<<변경 하는 핸들링 함수 모음>>>>>>>--------------------------

  // 프로필 이미지 파일을 업로드 하기 위해 사진 모양의 아이콘 눌렀을 때
  const handleProfileImgChange = () => {
    imgFileInputRef.current.click();
  };

  // 배경 이미지 파일을 업로드 하기 위해 사진 모양의 아이콘 눌렀을 때
  // const handleProfileBackgroundImgChange = () => {
  //   backgroundImgFileInputRef.current.click();
  // };

  // 프로필 이미지 파일을 올렸을 때
  const handleImgFileChange = (e) => {
    const imgFile = e.target.files[0];
    if (imgFile) {
      const reader = new FileReader();
      reader.onloadend = () => {
        const base64Url = reader.result;
        dispatch(profileModalActions.setProfileImg(base64Url));
        console.log("프로필 이미지 변경:", base64Url);
      };
      reader.readAsDataURL(imgFile);
    }
  };

  // 배경 이미지 파일을 올렸을 때
  // const handleBackgroundImgFileChange = (e) => {
  //   const imgFile = e.target.files[0];
  //   if (imgFile) {
  //     const reader = new FileReader();
  //     reader.onloadend = () => {
  //       const base64Url = reader.result;
  //       dispatch(profileModalActions.setProfileBackgroundImg(base64Url));
  //     };
  //     reader.readAsDataURL(imgFile);
  //   }
  // };

  //새로운 이름으로 변경하기
  const handleFullNameChange = (e) => {
    const newName = e.target.value;
    dispatch(profileModalActions.setProfileFullName(newName));
  };
  //소개 변경
  const handleIntroduceChange = (e) => {
    const newIntroduce = e.target.value;
    dispatch(profileModalActions.ssetProfileIntroduce(newIntroduce));
  };
  //교육 변경
  const handleEducationChange = (e) => {
    const newEducation = e.target.value;
    dispatch(profileModalActions.setProfileEducation(newEducation));
  };
  //지역 변경
  const handleLocationChange = (e) => {
    const newLocation = e.target.value;
    dispatch(profileModalActions.setProfileLocation(newLocation));
  };

  //X 아이콘 눌렀을 때
  const clickExitHandler = (e) => {
    e.preventDefault();
    dispatch(profileModalActions.setIsProfileModalOpen());
  };

  // save 버튼 눌렀을 때
  const clickSaveHandler = (e) => {
    e.preventDefault();
    console.log("저장 버튼 클릭");
    dispatch(updateProfileInfoToServer(profileFullName, profileImg))
      .then((success) => {
        if (success === true) {
          dispatch(profileModalActions.setIsStartPostOpen());
          navigate("/home");
          console.log("프로필 업데이트 성공");
        }
      })
      .catch((e) => alert("게시글 작성에 실패했습니다."));
  };

  // post textarea에 쓰여진 글씨가 1글자 이상일 때와 아닐 때 구분
  const SaveButton = () => {
    if (profileFullName.trim().length > 1) {
      return (
        <button className="post-button-able" onClick={clickSaveHandler}>
          Save
        </button>
      );
    } else {
      return <button className="post-button-disable">Save</button>;
    }
  };

  if (!isProfileModalOpen) {
    return null;
  }

  console.log(isProfileModalOpen, "모달 오픈 상태");

  //-------------------------------------<<<<리턴 부분>>>>>>------------------------------
  return createPortal(
    <div className="user-profile-modal">
      <div className="modal-content">
        <div class="modal-title-container">
          <h2>Edit intro</h2>
          <img
            className="top-exit-icon"
            src="/exit.png"
            alt="exit"
            onClick={clickExitHandler}
          />
        </div>

        {/* <button onClick={handleProfileBackgroundImgChange} className="btn-img">
          배경 사진 변경
        </button>
        <input
          type="file"
          accept="image/*"
          ref={backgroundImgFileInputRef}
          style={{ display: "none" }}
          onChange={handleBackgroundImgFileChange}
        /> */}

        <button onClick={handleProfileImgChange} className="btn-img">
          프로필 사진 변경
        </button>
        <input
          type="file"
          accept="image/*"
          ref={imgFileInputRef}
          style={{ display: "none" }}
          onChange={handleImgFileChange}
        />

        {/*풀네임--0*/}
        <div className="input-container">
          <label htmlFor="name">Name</label>
          <input
            type="text"
            value={profileFullName}
            onChange={handleFullNameChange}
            name="name"
          />
        </div>

        {/*소개*/}
        <div className="input-container">
          <label for="intro">Headline</label>
          <input
            type="text"
            value={profileIntroduce}
            onChange={handleIntroduceChange}
            name="intro"
          />
        </div>

        {/*교육*/}
        <div className="input-container">
          <label for="edu">Education</label>
          <input
            type="text"
            value={profileEducation}
            onChange={handleEducationChange}
            name="edu"
          />
        </div>

        {/*지역*/}
        <div className="input-container">
          <label for="location">Location</label>
          <input
            type="text"
            value={profileLocation}
            onChange={handleLocationChange}
            name="location"
          />
        </div>

        {SaveButton()}
      </div>
    </div>,
    document.getElementById("overlays-modal")
  );
};

export default UserProfileModal;
